const handleInputValue=e=>({type:TYPES.writeNumbers,payload:e});const resetAll=()=>({type:TYPES.resetAll});const resetFormula=()=>({type:TYPES.resetFormula});const resetDisplay=()=>({type:TYPES.resetDisplay});const writeFormula=()=>({type:TYPES.writeFormula});const evalFormula=()=>({type:TYPES.evaluateFormula});const handleKeysPressed=e=>{switch(e){case"operator":return e=>{switch(e){case".":handleDecimalKeyPress(e);break;case"=":handleEqualKeyPress(e);break;default:handleOperatorKeyPress(e)}};case"number":return e=>{dispatch(handleInputValue(e))};case"clear":return()=>{dispatch(resetAll())}}};const replaceLastOperator=()=>({type:TYPES.replaceLastOperator});const handleOperatorKeyPress=e=>{const{display:t,done:a,formula:r}=getState().calculator,[s,l]=r.split("").reverse();if(dispatch(handleInputValue(e)),hasNumbers(t))a&&dispatch(resetFormula()),dispatch(writeFormula());else if(isOperator(l)||s===e)isOperator(s)&&isOperator(l)&&dispatch(replaceLastOperator());else switch(!0){case hasTheOperators(s,"/","*"):hasTheOperators(e,"+","-")?dispatch(writeFormula()):dispatch(replaceLastOperator());break;case hasTheOperators(s,"+","-"):hasTheOperators(e,"*","/")?dispatch(replaceLastOperator()):dispatch(writeFormula())}},handleEqualKeyPress=()=>{const{done:e,display:t}=getState().calculator;e?dispatch(resetFormula()):hasNumbers(t)&&dispatch(evalFormula())},handleDecimalKeyPress=e=>{const{display:t}=getState().calculator,[a]=t.split("").reverse();"."===a||/[.]/g.test(t)||dispatch(handleInputValue(e))},keyboard=document.getElementById("keyboard"),currentInput=document.getElementById("display"),formula=document.getElementById("formula");const Calculator={currentInput:currentInput,formula:formula,keyboard:keyboard,keyboardOnEventListener(){this.keyboard.addEventListener("click",({target:{dataset:e}})=>{const t=Object.keys(e)[0]||null;if(t){const a=e[t];handleKeysPressed(t)(a)}})},updateFormula(e){this.formula.innerText=e},updateCurrentInput(e){this.currentInput.innerText=e}};const parseLeadingOrEndInvalidValues=e=>{const t=e.split("");return/^[0*\/+-.]/.test(e)?t.slice(1).join(""):e};const isOperator=e=>/[*\/+.-]/g.test(e);const hasTheOperators=(e,...t)=>{return new RegExp(`[${t.join("")}]`,"g").test(e)};const hasNumbers=e=>/\d/g.test(e);const deleteLastOperator=e=>{let t=e.split(""),a=e.length-1;for(;isOperator(t[a]);)t=t.filter((e,t)=>t!==a),a-=1;return t.join("")};const getZeroIfOnlyOperator=e=>1===e.length&&/[*\/+.-]/g.test(e)?0:e;const parseLargeDigits=e=>e.length>14?Number(e).toFixed(12)-0:e;const TYPES={writeNumbers:"[Calculator] Write numbers",writeFormula:"[Calculator] Write formula",replaceLastOperator:"[Calculator] Replace last operator",resetAll:"[Calculator] Reset all",evaluateFormula:"[Calculator] Evaluate formula",resetFormula:"[Calculator] Reset Formula",resetDisplay:"[Calculator] Reset display"};const initState={display:"0",formula:"",result:0,done:!1};const calculatorReducer=(state=initState,action)=>{switch(action.type){case TYPES.writeNumbers:return{...state,display:parseLeadingOrEndInvalidValues(state.display+action.payload)};case TYPES.writeFormula:return{...state,formula:state.formula+parseLargeDigits(state.display),display:state.display.split("")[state.display.length-1]};case TYPES.evaluateFormula:const operation=state.formula+getZeroIfOnlyOperator(state.display),opResult=eval(operation)+"";return{...state,done:!0,display:parseLargeDigits(opResult),formula:`${operation}=${parseLargeDigits(opResult)}`,result:parseLargeDigits(opResult)};case TYPES.replaceLastOperator:return{...state,formula:deleteLastOperator(state.formula)+state.display.split("")[state.display.length-1]};case TYPES.resetFormula:return{...state,formula:"",done:!1};case TYPES.resetDisplay:return{...state,display:"0"};case TYPES.resetAll:return initState;default:return state}};const{createStore:createStore,combineReducers:combineReducers}=Redux,reducers=combineReducers({calculator:calculatorReducer}),store=createStore(reducers),render=()=>{const{calculator:e}=getState();Calculator.updateCurrentInput(e.display),Calculator.updateFormula(e.formula),console.log(e)};const{subscribe:onUpdateStore,getState:getState,dispatch:dispatch}=store;onUpdateStore(render),Calculator.keyboardOnEventListener();